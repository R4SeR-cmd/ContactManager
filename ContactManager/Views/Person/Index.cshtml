@model IEnumerable<ContactManager.Models.Person>

@{
    ViewData["Title"] = "Contact Manager";
}

<div class="container-fluid">
    <h1 class="h3 mb-4">Contact Manager</h1>

    <!-- CSV Upload Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Upload CSV File</h5>
        </div>
        <div class="card-body">
            <form asp-action="UploadCsv" method="post" enctype="multipart/form-data" id="csvUploadForm">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="csvFile" class="form-label">Select CSV File</label>
                            <input type="file" class="form-control" id="csvFile" name="csvFile" accept=".csv" required />
                            <div class="form-text">CSV should contain: Name, DateOfBirth, Married, Phone, Salary</div>
                        </div>
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary" id="uploadBtn">
                            <i class="fas fa-upload"></i> Upload CSV
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Message Display -->
    @if (TempData["Message"] != null)
    {
        <div class="alert alert-@(TempData["MessageType"] == "success" ? "success" : "danger") alert-dismissible fade show" role="alert">
            @TempData["Message"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Data Table Section -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">People Data</h5>
            <div>
                <button class="btn btn-success btn-sm" onclick="addNewRow()">
                    <i class="fas fa-plus"></i> Add New
                </button>
                <button class="btn btn-info btn-sm" onclick="refreshData()">
                    <i class="fas fa-sync"></i> Refresh
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="peopleTable">
                    <thead>
                        <tr>
                            <th><input type="text" class="form-control form-control-sm" placeholder="Filter Name" onkeyup="filterTable(0, this.value)"></th>
                            <th><input type="text" class="form-control form-control-sm" placeholder="Filter DOB" onkeyup="filterTable(1, this.value)"></th>
                            <th><input type="text" class="form-control form-control-sm" placeholder="Filter Married" onkeyup="filterTable(2, this.value)"></th>
                            <th><input type="text" class="form-control form-control-sm" placeholder="Filter Phone" onkeyup="filterTable(3, this.value)"></th>
                            <th><input type="text" class="form-control form-control-sm" placeholder="Filter Salary" onkeyup="filterTable(4, this.value)"></th>
                            <th>Actions</th>
                        </tr>
                        <tr>
                            <th onclick="sortTable(0)">Name <i class="fas fa-sort"></i></th>
                            <th onclick="sortTable(1)">Date of Birth <i class="fas fa-sort"></i></th>
                            <th onclick="sortTable(2)">Married <i class="fas fa-sort"></i></th>
                            <th onclick="sortTable(3)">Phone <i class="fas fa-sort"></i></th>
                            <th onclick="sortTable(4)">Salary <i class="fas fa-sort"></i></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="peopleTableBody">
                        @foreach (var person in Model)
                        {
                            <tr data-id="@person.Id">
                                <td><span class="editable" data-field="name">@person.Name</span></td>
                                <td><span class="editable" data-field="dateOfBirth">@person.DateOfBirth.ToString("yyyy-MM-dd")</span></td>
                                <td><span class="editable" data-field="married">@person.Married</span></td>
                                <td><span class="editable" data-field="phone">@person.Phone</span></td>
                                <td><span class="editable" data-field="salary">@person.Salary.ToString("C")</span></td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="editRow(this)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/your-fontawesome-kit.js"></script>
    <script>
        let editingRow = null;
        let originalData = {};

        // CSV Upload handling
        document.getElementById('csvUploadForm').addEventListener('submit', function(e) {
            const fileInput = document.getElementById('csvFile');
            if (!fileInput.files[0]) {
                e.preventDefault();
                alert('Please select a CSV file to upload.');
                return false;
            }
            
            document.getElementById('uploadBtn').disabled = true;
            document.getElementById('uploadBtn').innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
        });

        // Add new row
        function addNewRow() {
            const tbody = document.getElementById('peopleTableBody');
            const newRow = document.createElement('tr');
            newRow.className = 'new-row';
            newRow.innerHTML = `
                <td><input type="text" class="form-control form-control-sm" name="name" required></td>
                <td><input type="date" class="form-control form-control-sm" name="dateOfBirth" required></td>
                <td><select class="form-control form-control-sm" name="married"><option value="false">False</option><option value="true">True</option></select></td>
                <td><input type="tel" class="form-control form-control-sm" name="phone" required></td>
                <td><input type="number" step="0.01" class="form-control form-control-sm" name="salary" required></td>
                <td>
                    <button class="btn btn-success btn-sm" onclick="saveNewRow(this)">
                        <i class="fas fa-save"></i>
                    </button>
                    <button class="btn btn-secondary btn-sm" onclick="cancelNewRow(this)">
                        <i class="fas fa-times"></i>
                    </button>
                </td>
            `;
            tbody.insertBefore(newRow, tbody.firstChild);
        }

        // Save new row
        async function saveNewRow(button) {
            const row = button.closest('tr');
            const inputs = row.querySelectorAll('input, select');
            const data = {};
            
            inputs.forEach(input => {
                if (input.name === 'salary') {
                    const normalized = (input.value ?? '').toString().replace(',', '.');
                    const parsed = parseFloat(normalized);
                    data.salary = isNaN(parsed) ? 0 : parsed;
                } else if (input.name === 'married') {
                    data.married = (input.value ?? '').toString().toLowerCase() === 'true';
                } else {
                    data[input.name] = input.value;
                }
            });

            try {
                const response = await fetch('/Person/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const text = await response.text();
                    throw new Error(text || `HTTP ${response.status}`);
                }

                let result;
                try {
                    result = await response.json();
                } catch {
                    throw new Error('Server returned invalid JSON');
                }

                if (result && result.success) {
                    location.reload();
                } else {
                    const msg = (result && result.message) ? result.message : 'Unknown error saving data';
                    alert('Error: ' + msg);
                }
            } catch (error) {
                const msg = (error && error.message) ? error.message : error;
                alert('Error saving data: ' + msg);
            }
        }

        // Cancel new row
        function cancelNewRow(button) {
            button.closest('tr').remove();
        }

        // Edit row
        function editRow(button) {
            if (editingRow) {
                alert('Please finish editing the current row first.');
                return;
            }

            const row = button.closest('tr');
            editingRow = row;
            originalData = {};

            const cells = row.querySelectorAll('.editable');
            cells.forEach(cell => {
                const field = cell.dataset.field;
                const value = cell.textContent;
                originalData[field] = value;

                let input;
                if (field === 'dateOfBirth') {
                    input = document.createElement('input');
                    input.type = 'date';
                    input.value = value;
                } else if (field === 'married') {
                    input = document.createElement('select');
                    input.innerHTML = `
                        <option value="false" ${value === 'False' ? 'selected' : ''}>False</option>
                        <option value="true" ${value === 'True' ? 'selected' : ''}>True</option>
                    `;
                } else if (field === 'salary') {
                    input = document.createElement('input');
                    input.type = 'number';
                    input.step = '0.01';
                    input.value = value.replace(/[^0-9.-]/g, '');
                } else {
                    input = document.createElement('input');
                    input.type = 'text';
                    input.value = value;
                }

                input.className = 'form-control form-control-sm';
                cell.innerHTML = '';
                cell.appendChild(input);
            });

            // Replace edit button with save/cancel
            const actionCell = row.querySelector('td:last-child');
            actionCell.innerHTML = `
                <button class="btn btn-success btn-sm" onclick="saveRow(this)">
                    <i class="fas fa-save"></i>
                </button>
                <button class="btn btn-secondary btn-sm" onclick="cancelEdit(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;
        }

        // Save edited row
        async function saveRow(button) {
            const row = button.closest('tr');
            const personId = row.dataset.id;
            const inputs = row.querySelectorAll('input, select');
            const data = { id: parseInt(personId) };

            inputs.forEach(input => {
                const field = input.closest('td').querySelector('.editable').dataset.field;
                if (field === 'salary') {
                    const normalized = (input.value ?? '').toString().replace(',', '.');
                    const parsed = parseFloat(normalized);
                    data[field] = isNaN(parsed) ? 0 : parsed;
                } else if (field === 'married') {
                    data[field] = (input.value ?? '').toString().toLowerCase() === 'true';
                } else {
                    data[field] = input.value;
                }
            });

            if (!Number.isNaN(data.id)) {
                data.id = Number(data.id);
            }

            try {
                const response = await fetch('/Person/Update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const text = await response.text();
                    throw new Error(text || `HTTP ${response.status}`);
                }

                let result;
                try {
                    result = await response.json();
                } catch {
                    throw new Error('Server returned invalid JSON');
                }

                if (result && result.success) {
                    location.reload();
                } else {
                    const msg = (result && result.message) ? result.message : 'Unknown error updating data';
                    alert('Error: ' + msg);
                }
            } catch (error) {
                const msg = (error && error.message) ? error.message : error;
                alert('Error updating data: ' + msg);
            }
        }

        // Cancel edit
        function cancelEdit(button) {
            const row = button.closest('tr');
            const cells = row.querySelectorAll('.editable');
            
            cells.forEach(cell => {
                const field = cell.dataset.field;
                cell.textContent = originalData[field];
            });

            // Restore original action buttons
            const actionCell = row.querySelector('td:last-child');
            actionCell.innerHTML = `
                <button class="btn btn-warning btn-sm" onclick="editRow(this)">
                    <i class="fas fa-edit"></i>
                </button>
            `;

            editingRow = null;
            originalData = {};
        }


        // Filter table
        function filterTable(columnIndex, value) {
            const table = document.getElementById('peopleTable');
            const tbody = table.querySelector('tbody');
            const rows = tbody.querySelectorAll('tr');

            rows.forEach(row => {
                const cell = row.cells[columnIndex];
                if (cell) {
                    const text = cell.textContent.toLowerCase();
                    if (text.includes(value.toLowerCase())) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                }
            });
        }

        // Sort table
        function sortTable(columnIndex) {
            const table = document.getElementById('peopleTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            rows.sort((a, b) => {
                const aValue = a.cells[columnIndex].textContent.trim();
                const bValue = b.cells[columnIndex].textContent.trim();

                if (columnIndex === 1) { // Date column
                    return new Date(aValue) - new Date(bValue);
                } else if (columnIndex === 2) { // Boolean column
                    return aValue.localeCompare(bValue);
                } else if (columnIndex === 4) { // Salary column
                    return parseFloat(aValue.replace(/[^0-9.-]/g, '')) - parseFloat(bValue.replace(/[^0-9.-]/g, ''));
                } else {
                    return aValue.localeCompare(bValue);
                }
            });

            rows.forEach(row => tbody.appendChild(row));
        }

        // Refresh data
        async function refreshData() {
            try {
                const response = await fetch('/Person/GetAll');
                const data = await response.json();
                location.reload();
            } catch (error) {
                alert('Error refreshing data: ' + error.message);
            }
        }
    </script>
}
